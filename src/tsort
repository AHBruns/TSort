#!/usr/bin/env python3


from functools import reduce
import sys
import read_write


def main(rel_input_path, rel_output_path):
	sink = read_write.sink()
	next(sink)
	command_parser = read_write.parse_cmd()
	next(command_parser)
	chunker = read_write.chunker(command_parser, sink)
	next(chunker)
	read_write.read_annotated_file(rel_input_path, chunker)
	for dep_name in read_write.dep_table:
		for dep_node in read_write.dep_table[dep_name]:
			dep_node.parents.append(
				set(read_write.desc_table.get(dep_name, list()))
			)
	for desc_name in read_write.desc_table:
		for desc_node in read_write.desc_table[desc_name]:
			desc_node.children.extend(
				read_write.dep_table.get(desc_name, list())
			)
	read_write.dep_table = dict()
	read_write.desc_table = dict()
	x = top_sort(read_write.nodes, list())
	if len(x) != len(read_write.nodes):
		raise Exception(
			"No complete traversal possible! Either remove some constraints "
			"or add more descriptions to the existing content."
		)
	read_write.write_final_file(rel_output_path, x)


def top_sort(nodes, ordering):
	def valid(n):
		for dep_set in n.parents:
			if not reduce(lambda acc, e: acc or e.mark, dep_set, False):
				return False
		return True
	for node in nodes:
		if not node.mark and valid(node):
			ordering.append(node)
			node.mark = True
			ordering = top_sort(node.children, ordering)
	return ordering


main(*sys.argv[1:])
